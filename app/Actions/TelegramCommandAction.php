<?php 

namespace App\Actions;

use Telegram\Bot\Commands\Command;
use App\Models\Operator;
use Telegram\Bot\Keyboard\Keyboard;
use Carbon\Carbon;
use App\Models\LunchSession;
use Illuminate\Support\Facades\Log;

class TelegramCommandAction
{ 
    public static function operatorStore(Command $command)
    {
        $personChatId = $command->getUpdate()->getMessage()->getChat()->getId();

        try {

            $message  = $command->getUpdate()->getMessage();
            $from     = $message->getFrom();
            
            $userName     = $from->getUsername() ?? 'not username';
            $userFullName = (($from->getFirstName() ?? '') . ' ' . ($from->getLastName() ?? '')) ?? 'no name';

            $attributes = [
                'telegram_id' => $from->getId(),
            ];

            $values = [
                'username' => $userName,
                'fullname' => $userFullName
            ];

            Operator::updateOrCreate(
                $attributes,
                $values
            );

        } catch (\Exception $exception) {
            $command->replyWithMessage([
                "chat_id" => $personChatId,
                "text"    => "–ü—Ä–æ–∏–∑–æ—à–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
            ]);
        } finally {
            $command->replyWithMessage([
                "chat_id" => $personChatId,
                "text"    => "–ü—Ä–∏–≤–µ—Ç {$userFullName}!. –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –ª–∞–Ω—á, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /lunch —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–µ—Å—Å–∏–∏!"
            ]);
        }
    } 

    public static function joinToQueue(Command $command, $userChatId){
        try {
            $sessionToday = Carbon::today('Asia/Tashkent')->toDateString();

            $lunchSessions = LunchSession::with('schedule', 'operators')
                ->where('date', $sessionToday)
                ->get();

            if ($lunchSessions->isEmpty()) {
                $command->replyWithMessage([
                    'chat_id' => $userChatId,
                    'text'    => '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–Ω—á-—Å–µ—Å—Å–∏–π.',
                ]);
                return;
            }
            foreach ($lunchSessions as $lunchSession) {

                $sessionSchedule = $lunchSession->schedule;
                $joinsPerson     = $lunchSession->operators->count();
                $maxPerson       = $sessionSchedule->max_per_round;
                $sessionTime     = gmdate('H:i', $sessionSchedule->hour);

                $text = "üïí <b>{$sessionSchedule->name}</b>\n"
                    . "–í—Ä–µ–º—è: {$sessionTime}\n"
                    . "–ó–∞–ø–∏—Å–∞–Ω–æ: {$joinsPerson} –∏–∑ {$maxPerson}";


                $keyboard = Keyboard::make();  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Keyboard

                $joinButton = $keyboard
                    ->inline()                        // —Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ inline-—Ä–µ–∂–∏–º
                    ->row([
                        $keyboard->inlineButton([          // –æ–±—ë—Ä–Ω—É—Ç–æ –≤ –º–∞—Å—Å–∏–≤!
                            'text'          => '‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
                            'callback_data' => "join:{$lunchSession->session_id}",
                        ]),
                    ]);

                $command->replyWithMessage([
                    "chat_id"      => $userChatId,
                    "text"         => $text,
                    "parse_mode"   => 'HTML',
                    'reply_markup' => $joinButton
                ]);
                
            }
        } catch (\Exception $exception) {
            $command->replyWithMessage([
                "chat_id"      => $userChatId,
                "text"         => "–ü—Ä–æ–∏–∑–æ—à–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞!",
            ]);
        }
    }
}